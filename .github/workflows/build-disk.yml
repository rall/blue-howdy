name: Build disk images

on:
  workflow_run:
    workflows:
      - Build container images
    types:
      - completed
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.base }}:${{ matrix.stream }} (${{ matrix.disk-type }})
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        disk-type: [qcow2, anaconda-iso]
        base:
          - bazzite
          - bazzite-dx
          - bazzite-dx-nvidia
          - bazzite-dx-nvidia-gnome
          - bluefin
          - bluefin-dx
          - bluefin-nvidia
          - bluefin-dx-nvidia-open
        stream: [gts, stable]
        exclude:
          - base: bazzite
            stream: gts
          - base: bazzite-dx
            stream: gts
          - base: bazzite-dx-nvidia
            stream: gts
          - base: bazzite-dx-nvidia-gnome
            stream: gts

    permissions:
      contents: read
      packages: read
      id-token: write

    env:
      IMAGE_NAME: ${{ matrix.base }}-howdy
      IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
      DEFAULT_TAG: ${{ matrix.stream }}
      BIB_IMAGE: ghcr.io/lorbuschris/bootc-image-builder:20250608

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Prepare env and pick desktop
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          # derive display manager from base name
          base="${{ matrix.base }}"
          dm="gnome"
          if [[ "$base" == bazzite* && "$base" != *gnome* ]]; then
            dm="kde"
          fi
          echo "DISPLAY_MANAGER=$dm" >> "$GITHUB_ENV"

          # normalize registry/name for image param
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY,,}" >> "$GITHUB_ENV"
          echo "IMAGE_NAME=${IMAGE_NAME,,}"         >> "$GITHUB_ENV"

          # pick correct config for type
          if [[ "${{ matrix.disk-type }}" == "anaconda-iso" ]]; then
            echo "CONFIG_FILE=./disk_config/iso-${dm}.toml" >> "$GITHUB_ENV"
          else
            echo "CONFIG_FILE=./disk_config/disk.toml" >> "$GITHUB_ENV"
          fi

          # record user ids for chown
          echo "USER_UID=$(id -u)" >> "$GITHUB_ENV"
          echo "USER_GID=$(id -g)" >> "$GITHUB_ENV"

      - name: Maximize build space (x64 only)
        if: runner.arch == 'X64'
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e
        with:
          remove-codeql: true

      - name: Build disk images
        id: build
        uses: osbuild/bootc-image-builder-action@main
        with:
          builder-image: ${{ env.BIB_IMAGE }}
          config-file: ${{ env.CONFIG_FILE }}
          image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}
          chown: ${{ env.USER_UID }}:${{ env.USER_GID }}
          types: ${{ matrix.disk-type }}
          additional-args: --use-librepo=True

      - name: Upload artifacts (when not S3)
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          path: ${{ steps.build.outputs.output-directory }}
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
          overwrite: true
